###Split group and unicox

library(survival)
library(caret)
library(glmnet)
library(survminer)
library(timeROC)

coxPfilter=0.05
rt=read.table("expTime.txt", header=T, sep="\t", check.names=F, row.names=1)
rt$futime[rt$futime<=0]=1
rt$futime=rt$futime/365

############????ɭ??ͼ????############
bioForest=function(coxFile=null,forestFile=null,forestCol=null){
	#??ȡ?????ļ?
	rt <- read.table(coxFile,header=T,sep="\t",row.names=1,check.names=F)
	gene <- rownames(rt)
	hr <- sprintf("%.3f",rt$"HR")
	hrLow  <- sprintf("%.3f",rt$"HR.95L")
	hrHigh <- sprintf("%.3f",rt$"HR.95H")
	Hazard.ratio <- paste0(hr,"(",hrLow,"-",hrHigh,")")
	pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))
		
	#????ͼ??
	pdf(file=forestFile, width=8, height=7)
	n <- nrow(rt)
	nRow <- n+1
	ylim <- c(1,nRow)
	layout(matrix(c(1,2),nc=2),width=c(4,2.5))
		
	#????ɭ??ͼ???ߵ??ٴ???Ϣ
	xlim = c(0,3)
	par(mar=c(4,2.5,2,1))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
	text.cex=0.8
	text(0,n:1,gene,adj=0,cex=text.cex)
	text(1.7,n:1,pVal,adj=1,cex=text.cex);text(1.7,n+1,'pvalue',cex=text.cex,adj=1)
	text(3.1,n:1,Hazard.ratio,adj=1,cex=text.cex);text(3.1,n+1,'Hazard ratio',cex=text.cex,adj=1,)
		
	#????ɭ??ͼ
	par(mar=c(4,1,2,1),mgp=c(2,0.5,0))
	LOGindex = 10 
	hrLow = log(as.numeric(hrLow),LOGindex)
	hrHigh = log(as.numeric(hrHigh),LOGindex)
	hr = log(as.numeric(hr),LOGindex)
	xlim = c(floor(min(hrLow,hrHigh)),ceiling(max(hrLow,hrHigh)))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="Hazard ratio")
	arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=90,code=3,length=0.05,col="darkblue",lwd=2.5)
	abline(v=log(1,LOGindex),col="black",lty=2,lwd=2)
	boxcolor = ifelse(as.numeric(hr) > log(1,LOGindex), forestCol[1],forestCol[2])
	points(as.numeric(hr), n:1, pch = 15, col = boxcolor, cex=1.3)
	a1 = axis(1,labels=F,tick=F)
	axis(1,a1,10^a1)
	dev.off()
}
############????ɭ??ͼ????############

#?????ݽ??з??飬????ģ??
n=1000      #????????Ŀ
for(i in 1:n){
	#############?????ݽ??з???#############
	inTrain<-createDataPartition(y=rt[,2], p=0.5, list=F)
	train<-rt[inTrain,]
	test<-rt[-inTrain,]
	trainOut=cbind(id=row.names(train),train)
	testOut=cbind(id=row.names(test),test)
	
	#??????cox????
	outUniTab=data.frame()
	sigGenes=c("futime","fustat")
	for(i in colnames(train[,3:ncol(train)])){
		#cox????
		cox <- coxph(Surv(futime, fustat) ~ train[,i], data = train)
		coxSummary = summary(cox)
		coxP=coxSummary$coefficients[,"Pr(>|z|)"]
		outUniTab=rbind(outUniTab,
				    cbind(id=i,
					    HR=coxSummary$conf.int[,"exp(coef)"],
					    HR.95L=coxSummary$conf.int[,"lower .95"],
					    HR.95H=coxSummary$conf.int[,"upper .95"],
					    pvalue=coxSummary$coefficients[,"Pr(>|z|)"]) )
		#???浥?????????ԵĻ???
		if(coxP<coxPfilter){
		    sigGenes=c(sigGenes,i)
		}
	}
	uniSigExp=train[,sigGenes]
	uniSigExpOut=cbind(id=row.names(uniSigExp),uniSigExp)
	if(ncol(uniSigExp)<6){next}
	
	#lasso?ع?
	x=as.matrix(uniSigExp[,c(3:ncol(uniSigExp))])
	y=data.matrix(Surv(uniSigExp$futime,uniSigExp$fustat))
	fit <- glmnet(x, y, family = "cox", maxit = 1000)
	cvfit <- cv.glmnet(x, y, family="cox", maxit = 1000)
	coef <- coef(fit, s = cvfit$lambda.min)
	index <- which(coef != 0)
	actCoef <- coef[index]
	lassoGene=row.names(coef)[index]
	lassoSigExp=uniSigExp[,c("futime", "fustat", lassoGene)]
	lassoSigExpOut=cbind(id=row.names(lassoSigExp), lassoSigExp)
	geneCoef=cbind(Gene=lassoGene, Coef=actCoef)
	if(nrow(geneCoef)<2){next}
	
	#############????COXģ??#############
	multiCox <- coxph(Surv(futime, fustat) ~ ., data = lassoSigExp)
	multiCox=step(multiCox, direction = "both")
	multiCoxSum=summary(multiCox)
	
	#????ģ?͵Ĺ?ʽ
	outMultiTab=data.frame()
	outMultiTab=cbind(
		               coef=multiCoxSum$coefficients[,"coef"],
		               HR=multiCoxSum$conf.int[,"exp(coef)"],
		               HR.95L=multiCoxSum$conf.int[,"lower .95"],
		               HR.95H=multiCoxSum$conf.int[,"upper .95"],
		               pvalue=multiCoxSum$coefficients[,"Pr(>|z|)"])
	outMultiTab=cbind(id=row.names(outMultiTab),outMultiTab)
	outMultiTab=outMultiTab[,1:2]
	
	#????train???????ļ?
	riskScore=predict(multiCox,type="risk",newdata=train)
	coxGene=rownames(multiCoxSum$coefficients)
	coxGene=gsub("`","",coxGene)
	outCol=c("futime","fustat",coxGene)
	medianTrainRisk=median(riskScore)
	risk=as.vector(ifelse(riskScore>medianTrainRisk,"high","low"))
	trainRiskOut=cbind(id=rownames(cbind(train[,outCol],riskScore,risk)),cbind(train[,outCol],riskScore,risk))
		
	#????test???????ļ?
	riskScoreTest=predict(multiCox,type="risk",newdata=test)
	riskTest=as.vector(ifelse(riskScoreTest>medianTrainRisk,"high","low"))
	testRiskOut=cbind(id=rownames(cbind(test[,outCol],riskScoreTest,riskTest)),cbind(test[,outCol],riskScore=riskScoreTest,risk=riskTest))
	
	#?Ƚϸߵͷ??????????????죬?õ???????pvalue	
	diff=survdiff(Surv(futime, fustat) ~risk,data = train)
	pValue=1-pchisq(diff$chisq, df=1)
	diffTest=survdiff(Surv(futime, fustat) ~riskTest,data = test)
	pValueTest=1-pchisq(diffTest$chisq, df=1)


	#ROC??????????
	predictTime=1    #Ԥ??ʱ??
	roc=timeROC(T=train$futime, delta=train$fustat,
	            marker=riskScore, cause=1,
	            times=c(predictTime), ROC=TRUE)
	rocTest=timeROC(T=test$futime, delta=test$fustat,
	            marker=riskScoreTest, cause=1,
	            times=c(predictTime), ROC=TRUE)	
	
	if((pValue<0.01) & (roc$AUC[2]>0.65) & (pValueTest<0.05) & (rocTest$AUC[2]>0.63)){
		#????????????
		write.table(trainOut,file="data.train.txt",sep="\t",quote=F,row.names=F)
		write.table(testOut,file="data.test.txt",sep="\t",quote=F,row.names=F)
		#?????????ؽ???
		write.table(outUniTab,file="uni.cox.txt",sep="\t",row.names=F,quote=F)
		outSigUniTab=outUniTab[as.numeric(as.vector(outUniTab$pvalue))<0.05,]
		write.table(outSigUniTab,file="uni.coxSig.txt",sep="\t",row.names=F,quote=F)
		write.table(uniSigExpOut,file="uni.sigExp.txt",sep="\t",row.names=F,quote=F)
		bioForest(coxFile="uni.coxSig.txt",forestFile="uni.foreast.pdf",forestCol=c("red","green"))
	    #lasso????
	    write.table(lassoSigExpOut,file="lasso.SigExp.txt",sep="\t",row.names=F,quote=F)
		pdf(file="lasso.lambda.pdf", width=7, height=7)
		plot(fit, xvar = "lambda", label = TRUE)
		dev.off()
		pdf(file="lasso.cvfit.pdf", width=7, height=7)
		plot(cvfit)
		abline(v=log(c(cvfit$lambda.min,cvfit$lambda.1se)), lty="dashed")
		dev.off()
	    #?????????ؽ???
		write.table(outMultiTab,file="multiCox.txt",sep="\t",row.names=F,quote=F)
		#???з????ļ?
		write.table(trainRiskOut,file="risk.train.txt",sep="\t",quote=F,row.names=F)
		write.table(testRiskOut,file="risk.test.txt",sep="\t",quote=F,row.names=F)
		allRiskOut=rbind(trainRiskOut, testRiskOut)
		write.table(allRiskOut,file="risk.all.txt",sep="\t",quote=F,row.names=F)
		break
	}
}

###Volcano figure
#??????????
Sig=ifelse(rt$pvalue<pvalFilter, ifelse(rt$HR>1,"High risk","Low risk"), "Not")

#???ƻ?ɽͼ
rt = mutate(rt, Sig=Sig)
p = ggplot(rt, aes(log2(HR), -log10(pvalue)))+
    geom_point(aes(col=Sig))+
    xlim(-1.5,1.5)+
    scale_color_npg()+
    labs(title = " ")+
    theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"))
#??ͼ???б?ע???׵?????
p=p+geom_label_repel(data=filter(rt, (pvalue<pvalFilter)), size=2,
                     aes(label=id))
p=p+theme_grey()
#????ͼ??
pdf(file="vol.pdf", width=6, height=5)
print(p)
dev.off()

library(limma)
library(scatterplot3d)
#library(pcaMethods)

#定义PCA分析函数
myPCA=function(input=null, output=null){
  #读取表达数据文件
  rt=read.table(input, header=T, sep="\t", check.names=F)
  rt=as.matrix(rt)
  rownames(rt)=rt[,1]
  exp=rt[,2:ncol(rt)]
  dimnames=list(rownames(exp),colnames(exp))
  data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
  data=t(avereps(data))
  
  #读取risk风险文件
  risk=read.table("risk.all.txt", header=T, sep="\t", row.names=1, check.names=F)
  sameSample=intersect(rownames(data),rownames(risk))
  data=data[sameSample,]
  risk=risk[sameSample,]
  group=as.vector(risk[,"risk"])
  
  #PCA分析
  data.class <- rownames(data)
  data.pca <- prcomp(data)
  pcaPredict=predict(data.pca)
  
  # 计算R2值
  variance_explained <- data.pca$sdev^2
  total_variance <- sum(variance_explained)
  R2 <- variance_explained / total_variance
  
  # 计算Q2值（交叉验证预测能力）
  n_samples <- nrow(data)
  n_components <- min(ncol(data), n_samples)
  cross_val_scores <- pcaMethods::cvpca(data, ncomp = n_components)$Q2
  
  # 输出R2和Q2值
  cat("R2 values:", R2, "\n")
  cat("Q2 values:", cross_val_scores, "\n")
  
  #绘制PCA图形
  color=ifelse(group=="low", 4, 2)
  pdf(file=output, width=6.5, height=6)
  par(oma=c(1,1,2.5,1))
  s3d=scatterplot3d(pcaPredict[,1:3], pch = 16, color=color, angle=45)
  legend("top", legend = c("Low risk","High risk"),pch = 16, inset = -0.2, box.col="white", xpd = TRUE, horiz = TRUE,col=c(4,2))
  dev.off()
}

######调用函数,绘制所有蛋白的PCA图
myPCA(input="data_microbiome.txt", output="PCA.all.pdf")

######读取风险文件,绘制模型蛋白的PCA图
risk=read.table("risk.all.txt", header=T, sep="\t", check.names=F, row.names=1)
data=risk[,3:(ncol(risk)-2)]
group=as.vector(risk[,"risk"])

#PCA分析
data.class <- rownames(data)
data.pca <- prcomp(data)
pcaPredict=predict(data.pca)

# 计算R2值
variance_explained <- data.pca$sdev^2
total_variance <- sum(variance_explained)
R2 <- variance_explained / total_variance

# 计算Q2值（交叉验证预测能力）
n_samples <- nrow(data)
n_components <- min(ncol(data), n_samples)
cross_val_scores <- pcaMethods::cvpca(data, ncomp = n_components)$Q2

# 输出R2和Q2值
cat("R2 values:", R2, "\n")
cat("Q2 values:", cross_val_scores, "\n")

#可视化
color=ifelse(group=="low", 4, 2)
pdf(file="PCA.risk.pdf", width=6.5, height=6)
par(oma=c(1,1,2.5,1))
s3d=scatterplot3d(pcaPredict[,1:3], pch = 16, color=color, angle=45)
legend("top", legend = c("Low risk","High risk"),pch = 16, inset = -0.2, box.col="white", xpd = TRUE, horiz = TRUE,col=c(4,2))
dev.off()

#?????????????ĺ???
bioSurvival=function(inputFile=null, outFile=null){
	#??ȡ?????ļ?
	rt=read.table(inputFile, header=T, sep="\t", check.names=F)
	#?Ƚϸߵͷ??????????????죬?õ???????pֵ
	diff=survdiff(Surv(futime, fustat) ~risk,data = rt)
	pValue=1-pchisq(diff$chisq,df=1)
	if(pValue<0.001){
		pValue="p<0.001"
	}else{
		pValue=paste0("p=",sprintf("%.03f",pValue))
	}
	fit <- survfit(Surv(futime, fustat) ~ risk, data = rt)
	
	#????????????
	surPlot=ggsurvplot(fit, 
		           data=rt,
		           conf.int=F,
		           pval=pValue,
		           pval.size=6,
		           legend.title="Risk",
		           legend.labs=c("High risk", "Low risk"),
		           xlab="Time(years)",
		           ylab="Overall survival",
		           ggtheme=theme_light(),
		           break.time.by = 5,
		           palette = c("#7CC767","#223D6C"),
		           surv.median.line = "hv",
		           risk.table=T,
		           cumevents=F,
		           risk.table.height=.3,
		           font.title    = c(16, "bold", "darkblue"),#用长度为3的向量分别指定大小、类型、颜色
		           font.subtitle = c(15, "bold.italic", "purple"),
		           font.caption  = c(14, "plain", "orange"),
		           font.x        = c(14, "bold.italic", "red"),
		           font.y        = c(14, "bold.italic", "darkred"),
		           font.xtickslab = c(12, "plain", "darkgreen"))
	
	#????ͼ??
	pdf(file=outFile, width=6.5, height=5.5, onefile=FALSE)
	print(surPlot)
	dev.off()
}

#???????????ߵĺ???
bioRiskPlot=function(inputFile=null, project=null){
	rt=read.table(inputFile, header=T, sep="\t", check.names=F, row.names=1)    #??ȡ?????ļ?
	rt=rt[order(rt$riskScore),]      #???ݲ??˵ķ??յ÷ֶ???Ʒ????????
		
	#???Ʒ???????
	riskClass=rt[,"risk"]
	lowLength=length(riskClass[riskClass=="low"])
	highLength=length(riskClass[riskClass=="high"])
	lowMax=max(rt$riskScore[riskClass=="low"])
	line=rt[,"riskScore"]
	line[line>10]=10
	pdf(file=paste0(project, ".riskScore.pdf"), width=7, height=4)
	plot(line, type="p", pch=20,
		 xlab="Patients (increasing risk socre)",
		 ylab="Risk score",
		 col=c(rep("blue",lowLength),rep("red",highLength)) )
	abline(h=lowMax,v=lowLength,lty=2)
	legend("topleft", c("High risk","Low Risk"),bty="n",pch=19,col=c("red","blue"),cex=1.2)
	dev.off()
		
	#????????״̬ͼ
	color=as.vector(rt$fustat)
	color[color==1]="red"
	color[color==0]="blue"
	pdf(file=paste0(project, ".survStat.pdf"), width=7, height=4)
	plot(rt$futime, pch=19,
		 xlab="Patients (increasing risk socre)",
		 ylab="Survival time (years)",
		 col=color)
	legend("topleft", c("Dead","Alive"),bty="n",pch=19,col=c("red","blue"),cex=1.2)
	abline(v=lowLength,lty=2)
	dev.off()
	
	#??????ͼע?͵???ɫ
	ann_colors=list()
	bioCol=c("blue", "red")
	names(bioCol)=c("low", "high")
	ann_colors[["Risk"]]=bioCol

	#???Ʒ?????ͼ
	rt1=rt[c(3:(ncol(rt)-2))]
	rt1=t(rt1)
	annotation=data.frame(Risk=rt[,ncol(rt)])
	rownames(annotation)=rownames(rt)
	pdf(file=paste0(project, ".heatmap.pdf"), width=7, height=4)
	pheatmap(rt1, 
		     annotation=annotation,
		     annotation_colors = ann_colors, 
		     cluster_cols = FALSE,
		     cluster_rows = FALSE,
		     show_colnames = F,
		     scale="row",
		     color = colorRampPalette(c(rep("blue",3.5), "white", rep("red",3.5)))(50),
		     fontsize_col=3,
		     fontsize=7,
		     fontsize_row=8)
	dev.off()
}

############????ɭ??ͼ????############
bioForest=function(coxFile=null, forestFile=null, forestCol=null){
	#??ȡ?????ļ?
	rt <- read.table(coxFile, header=T, sep="\t", check.names=F, row.names=1)
	gene <- rownames(rt)
	hr <- sprintf("%.3f",rt$"HR")
	hrLow  <- sprintf("%.3f",rt$"HR.95L")
	hrHigh <- sprintf("%.3f",rt$"HR.95H")
	Hazard.ratio <- paste0(hr,"(",hrLow,"-",hrHigh,")")
	pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))
		
	#????ͼ??
	pdf(file=forestFile, width=6.6, height=4.5)
	n <- nrow(rt)
	nRow <- n+1
	ylim <- c(1,nRow)
	layout(matrix(c(1,2),nc=2),width=c(3,2.5))
		
	#????ɭ??ͼ???ߵ??ٴ???Ϣ
	xlim = c(0,3)
	par(mar=c(4,2.5,2,1))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
	text.cex=0.8
	text(0,n:1,gene,adj=0,cex=text.cex)
	text(1.5-0.5*0.2,n:1,pVal,adj=1,cex=text.cex);text(1.5-0.5*0.2,n+1,'pvalue',cex=text.cex,font=2,adj=1)
	text(3.1,n:1,Hazard.ratio,adj=1,cex=text.cex);text(3.1,n+1,'Hazard ratio',cex=text.cex,font=2,adj=1)
		
	#?????ұߵ?ɭ??ͼ
	par(mar=c(4,1,2,1),mgp=c(2,0.5,0))
	xlim = c(0,max(as.numeric(hrLow),as.numeric(hrHigh)))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="Hazard ratio")
	arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=90,code=3,length=0.05,col="darkblue",lwd=2.5)
	abline(v=1,col="black",lty=2,lwd=2)
	boxcolor = ifelse(as.numeric(hr) > 1, forestCol, forestCol)
	points(as.numeric(hr), n:1, pch = 15, col = boxcolor, cex=1.5)
	axis(1)
	dev.off()
}
############????ɭ??ͼ????############

############??????��Ԥ??????????#############
indep=function(riskFile=null, cliFile=null, project=null){
	risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)    #??ȡ?????ļ?
	cli=read.table(cliFile, header=T, sep="\t", check.names=F, row.names=1)      #??ȡ?ٴ??ļ?
	
	#???ݺϲ?
	sameSample=intersect(row.names(cli),row.names(risk))
	risk=risk[sameSample,]
	cli=cli[sameSample,]
	rt=cbind(futime=risk[,1], fustat=risk[,2], cli, riskScore=risk[,(ncol(risk)-1)])
	
	#?????ض?��Ԥ??????
	uniCoxFile=paste0(project,".uniCox.txt")
	uniCoxPdf=paste0(project,".uniCox.pdf")
	uniTab=data.frame()
	for(i in colnames(rt[,3:ncol(rt)])){
		 cox <- coxph(Surv(futime, fustat) ~ rt[,i], data = rt)
		 coxSummary = summary(cox)
		 uniTab=rbind(uniTab,
		              cbind(id=i,
		              HR=coxSummary$conf.int[,"exp(coef)"],
		              HR.95L=coxSummary$conf.int[,"lower .95"],
		              HR.95H=coxSummary$conf.int[,"upper .95"],
		              pvalue=coxSummary$coefficients[,"Pr(>|z|)"])
		              )
	}
	write.table(uniTab,file=uniCoxFile,sep="\t",row.names=F,quote=F)
	bioForest(coxFile=uniCoxFile, forestFile=uniCoxPdf, forestCol="green")
#2B5F75#?????ض?��Ԥ??????
	multiCoxFile=paste0(project,".multiCox.txt")
	multiCoxPdf=paste0(project,".multiCox.pdf")
	uniTab=uniTab[as.numeric(uniTab[,"pvalue"])<1,]
	rt1=rt[,c("futime","fustat",as.vector(uniTab[,"id"]))]
	multiCox=coxph(Surv(futime, fustat) ~ ., data = rt1)
	multiCoxSum=summary(multiCox)
	multiTab=data.frame()
	multiTab=cbind(
	             HR=multiCoxSum$conf.int[,"exp(coef)"],
	             HR.95L=multiCoxSum$conf.int[,"lower .95"],
	             HR.95H=multiCoxSum$conf.int[,"upper .95"],
	             pvalue=multiCoxSum$coefficients[,"Pr(>|z|)"])
	multiTab=cbind(id=row.names(multiTab),multiTab)
	write.table(multiTab, file=multiCoxFile, sep="\t", row.names=F, quote=F)
	bioForest(coxFile=multiCoxFile, forestFile=multiCoxPdf, forestCol="red")
}
############??????��Ԥ??????????#############

riskFile="risk.all.txt"     #?????ļ?
cliFile="clinical.txt"      #?ٴ??????ļ?
setwd("G:\\BaiduNetdiskDownload\\BaiduNetdiskWorkspace\\生信文章\\微生物组\\19.ROC")     #?޸Ĺ???Ŀ¼

#??ȡ?????????ļ?
risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)
risk=risk[,c("futime", "fustat", "riskScore")]

#??ȡ?ٴ??????ļ?
cli=read.table(cliFile, header=T, sep="\t", check.names=F, row.names=1)

#?ϲ?????
samSample=intersect(row.names(risk), row.names(cli))
risk1=risk[samSample,,drop=F]
cli=cli[samSample,,drop=F]
rt=cbind(risk1, cli)

#????ROC???ߵ???ɫ
bioCol=rainbow(ncol(rt)-1, s=0.9, v=0.9)


######????1 3 5????ROC????######
ROC_rt=timeROC(T=risk$futime,delta=risk$fustat,
	           marker=risk$riskScore,cause=1,
	           weighting='aalen',
	           times=c(1,3,5),ROC=TRUE)
pdf(file="ROC.all.pdf", width=5, height=5)
plot(ROC_rt,time=1,col=c("#D75455"),title=FALSE,lwd=2)
plot(ROC_rt,time=3,col=c("#90B44B"),add=TRUE,title=FALSE,lwd=2)
plot(ROC_rt,time=5,col=c("#268785"),add=TRUE,title=FALSE,lwd=2)
legend('bottomright',
	   c(paste0('AUC at 1 years: ',sprintf("%.03f",ROC_rt$AUC[1])),
	     paste0('AUC at 3 years: ',sprintf("%.03f",ROC_rt$AUC[2])),
	     paste0('AUC at 5 years: ',sprintf("%.03f",ROC_rt$AUC[3]))),
	   col=c("#D75455","#90B44B","#268785"), lwd=2, bty = 'n')
dev.off()




########################################################



######?????ٴ???ROC????######
predictTime=1     #????Ԥ??????
aucText=c()
pdf(file="cliROC.pdf", width=5, height=5)
#???Ʒ??յ÷ֵ?ROC????
i=3
ROC_rt=timeROC(T=risk$futime,
               delta=risk$fustat,
               marker=risk$riskScore, cause=1,
               weighting='aalen',
               times=c(predictTime),ROC=TRUE)
plot(ROC_rt, time=predictTime, col=bioCol[i-2], title=FALSE, lwd=2)
aucText=c(paste0("Risk", ", AUC=", sprintf("%.3f",ROC_rt$AUC[2])))
abline(0,1)
#???ٴ????ݽ???ѭ?????????ٴ????ݵ?ROC????
for(i in 4:ncol(rt)){
	ROC_rt=timeROC(T=rt$futime,
				   delta=rt$fustat,
				   marker=rt[,i], cause=1,
				   weighting='aalen',
				   times=c(predictTime),ROC=TRUE)
	plot(ROC_rt, time=predictTime, col=bioCol[i-2], title=FALSE, lwd=2, add=TRUE)
	aucText=c(aucText, paste0(colnames(rt)[i],", AUC=",sprintf("%.3f",ROC_rt$AUC[2])))
}
#????ͼ?????õ?????ROC?????µ?????
legend("bottomright", aucText,lwd=2,bty="n",col=bioCol[1:(ncol(rt)-1)])
dev.off()

library(limma)
library(org.Hs.eg.db)
library(clusterProfiler)
library(enrichplot)

expFile="symbol.txt"        #?????????ļ?
riskFile="risk.all.txt"     #?????ļ?
gmtFile="c2.cp.kegg.symbols.gmt"     #???????ļ?
setwd("C:\\Users\\lexb\\Desktop\\proteome\\28.GSEA")     #???ù???Ŀ¼

#??ȡ?ļ?,?????????ļ?????????
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=data[rowMeans(data)>0.5,]

#ɾ????????Ʒ
group=sapply(strsplit(colnames(data),"\\-"), "[", 4)
group=sapply(strsplit(group,""), "[", 1)
group=gsub("2", "1", group)
data=data[,group==0]
data=t(data)
rownames(data)=gsub("(.*?)\\-(.*?)\\-(.*?)\\-.*", "\\1\\-\\2\\-\\3", rownames(data))
data=t(avereps(data))

#??ȡ?????ļ?
risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)
sameSample=intersect(row.names(risk), colnames(data))
risk=risk[sameSample,]
data=data[,sameSample]

#?ߵͷ??ձȽϣ??õ?logFC
dataL=data[,row.names(risk[risk[,"risk"]=="low",])]
dataH=data[,row.names(risk[risk[,"risk"]=="high",])]
meanL=rowMeans(dataL)
meanH=rowMeans(dataH)
meanL[meanL<0.00001]=0.00001
meanH[meanH<0.00001]=0.00001
logFC=log2(meanH)-log2(meanL)
logFC=sort(logFC,decreasing=T)
genes=names(logFC)

#??ȡ???????ļ?
gmt=read.gmt(gmtFile)

#GSEA????????
kk=GSEA(logFC, TERM2GENE=gmt, pvalueCutoff=1, minGSSize=15, maxGSSize=500)
kkTab=as.data.frame(kk)
kkTab=kkTab[kkTab$pvalue<0.05,]
write.table(kkTab,file="GSEA.result.txt",sep="\t",quote=F,row.names = F)
	
#?????߷??ո?????ͼ??
termNum=5     #????չʾͨ·????Ŀ??չʾǰ5??ͨ·
kkUp=kkTab[kkTab$NES>0,]
if(nrow(kkUp)>=termNum){
	showTerm=row.names(kkUp)[1:termNum]
	gseaplot=gseaplot2(kk, showTerm, base_size=8, title="Enriched in high risk group")
	pdf(file="GSEA.highrisk.pdf", width=7, height=5.5)
	print(gseaplot)
	dev.off()
}

#?????ͷ??ո?????ͼ??
termNum=5     #????չʾͨ·????Ŀ??չʾǰ5??ͨ·
kkDown=kkTab[kkTab$NES<0,]
if(nrow(kkDown)>=termNum){
	showTerm=row.names(kkDown)[1:termNum]
	gseaplot=gseaplot2(kk, showTerm, base_size=8, title="Enriched in low risk group")
	pdf(file="GSEA.lowrisk.pdf", width=7, height=5.5)
	print(gseaplot)
	dev.off()
}


#??ȡ?????ļ?
data=read.table(inputFile, header=T, sep="\t", row.names=1, check.names=F)
data=rbind(rep(max(data),22), rep(0,22), data)

#????????ϸ????˳??
sortCellNames= c("B cells memory",
			    "B cells naive",              
				"Dendritic cells activated",
				"Dendritic cells resting",     
				"Eosinophils",
				"Macrophages M0",              
				"Macrophages M1",
				"Macrophages M2",              
				"Mast cells activated",
				"NK cells resting",            
				"Plasma cells",
				"Mast cells resting", 
				"T cells CD4 memory activated",
				"T cells CD4 naive", 
				"T cells CD4 memory resting",        
				"Monocytes",
				"Neutrophils",                 
				"NK cells activated",           
				"T cells CD8","T cells follicular helper",   
				"T cells gamma delta",
				"T cells regulatory (Tregs)")
data=data[,sortCellNames]

#??ȡ?????Ľ????ļ?,??????????
corStat=read.table(diffFile, header=T, sep="\t", check.names=F, row.names=1)
corStat=corStat[sortCellNames,]
colnames(data)=paste0(colnames(data), corStat$sig)

#?????״?ͼ
pdf(file="radar.pdf", width=8, height=8)
radarchart(data  , axistype=1 , 
	pcol=c("#2B5F75", "#A36336"),       #??????ɫ
	plwd=2,                      #????????
	plty=1,                      #ѡ??????(2)??ʵ??(1)
	cglcol="grey",               #??????????ɫ
	cglty=1,                     #????????ѡ??????(2)??ʵ??(1)
	cglwd=0.8,                   #??????????ϸ 
	caxislabels=seq(0,1,0.05),   #?????Ŀ̶?
	axislabcol="grey",           #?̶???ɫ
	vlcex=0.75                   #??????С
   )
legend("topright", legend=rownames(data[-c(1,2),]), bty = "n", pch=20 , col=c("#2B5F75", "#A36336") ,cex=1.2, pt.cex=2)
dev.off()

#??ȡ?????????ļ????????????ļ?????
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
mat=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
mat=avereps(mat)
mat=mat[rowMeans(mat)>0,]
	
#??ȡ???????ļ?
geneSet=getGmt(gmtFile, geneIdType=SymbolIdentifier())
	
#ssgsea????
ssgseaScore=gsva(mat, geneSet, method='ssgsea', kcdf='Gaussian', abs.ranking=TRUE)
#????ssGSEA score????????
normalize=function(x){
	return((x-min(x))/(max(x)-min(x)))}
#??ssGSEA score???н???
ssgseaOut=normalize(ssgseaScore)
ssgseaOut=rbind(id=colnames(ssgseaOut),ssgseaOut)
write.table(ssgseaOut, file="ssgseaOut.txt", sep="\t", quote=F, col.names=F)


#??ȡ???ͽ????ļ?
Type=read.table(clusterFile, header=T, sep="\t", check.names=F, row.names=1)
colnames(Type)=c("risk")
Type=Type[order(Type[,"risk"],decreasing=T),,drop=F]
Type$risk=factor(Type$risk, levels=unique(Type$risk))

#??ȡ????΢?????????ļ?
score=read.table(estimateFile, header=T, sep="\t", check.names=F, row.names=1)
group=sapply(strsplit(colnames(score),"\\-"), "[", 4)
group=sapply(strsplit(group,""), "[", 1)
group=gsub("2", "1", group)
score=score[,group==0]
score=t(avereps(score))
rownames(score)=gsub("(.*?)\\-(.*?)\\-(.*?)\\-.*", "\\1\\-\\2\\-\\3", rownames(score))
score=score[,1:ncol(score)]
score=avereps(score)
sameSample=intersect(row.names(Type), row.names(score))
score=score[sameSample,]
Type=Type[row.names(score),,drop=F]
#???ݺϲ?
rt=cbind(Type, score)

#???ϲ?????????ת??Ϊggplot2???????ļ?
data=melt(rt, id.vars=c("risk"))
colnames(data)=c("risk", "scoreType", "Score")

#????С????ͼ
p=ggviolin(data, x="scoreType", y="Score", fill = "risk",
	     xlab="",
	     ylab="GSVA",
	     legend.title="Risk",
	     add = "boxplot", add.params = list(color="white"),
	     palette = c("blue","red"), width=1)
p=p+rotate_x_text(80)
p1=p+stat_compare_means(aes(group=risk),
	      method="wilcox.test",
	      symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", " ")),
	      label = "p.signif")

#????ͼ??
pdf(file="vioplot.pdf", width=10, height=15)
print(p1)
dev.off()

boxplot=ggboxplot(data, x="scoreType", y="Score", fill = "risk",
                  xlab="",
                  ylab="GSVA Results",
                  legend.title="Risk",
                  width=0.8,
                  palette=c("#7CC767","#223D6C","#D20A13","#FFD121","#088247","#11AA4D"))+
  rotate_x_text(80)+
  stat_compare_means(aes(group=risk),symnum.args=list(cutpoints=c(0, 0.001, 0.01, 0.05, 1), symbols=c("***", "**", "*", "")), label="p.signif")

#输出图片
pdf(file="immune.diff.pdf", width=10, height=15)
print(boxplot)


dev.off()

#??ȡ?????ļ????????????ļ?????????
rt=read.table("risk.all.txt", header=T, sep="\t", check.names=F, row.names=1)
data=rt[,(3:(ncol(rt)-2))]
data=t(data)

#????ģ?͵??׵ı???��????Ʒ???з???
maxK=9     #??????kֵ(???????Խ???Ʒ?ֳɼ???????)
results=ConsensusClusterPlus(data,
              maxK=maxK,
              reps=50,
              pItem=0.8,
              pFeature=1,
              title=workDir,
              clusterAlg="km",
              distance="euclidean",
              seed=123456,
              plot="png")


#????????
clusterNum=3         #?ּ???, ????ǰ????ͼ???ж?
Cluster=results[[clusterNum]][["consensusClass"]]
outTab=cbind(rt, Cluster)
outTab[,"Cluster"]=paste0("C", outTab[,"Cluster"])
outTab=rbind(ID=colnames(outTab), outTab)
write.table(outTab, file="cluster.txt", sep="\t", quote=F, col.names=F)

#??ȡ?????ļ?
rt=read.table(clusterFile, header=T, sep="\t", check.names=F, row.names=1)

#???͵?????????????
length=length(levels(factor(rt$Cluster)))
diff=survdiff(Surv(futime, fustat) ~ Cluster, data = rt)
pValue=1-pchisq(diff$chisq, df=length-1)
if(pValue<0.001){
	pValue="p<0.001"
}else{
	pValue=paste0("p=",sprintf("%.03f",pValue))
}
fit <- survfit(Surv(futime, fustat) ~ Cluster, data = rt)
#print(surv_median(fit))

#????????????
bioCol=c("#0066FF","#FF9900","#00DB00","#FF0000","#7CC767","#223D6C","#D20A13","#FFD121","#088247","#11AA4D")
bioCol=bioCol[1:length]
surPlot=ggsurvplot(fit, 
		           data=rt,
		           conf.int=F,
		           pval=pValue,
		           pval.size=6,
		           legend.title="Cluster",
		           legend.labs=levels(factor(rt[,"Cluster"])),
		           legend = c(0.8, 0.8),
		           font.legend=10,
		           xlab="Time(years)",
		           break.time.by = 1,
		           palette = bioCol,
		           risk.table=T,
		           cumevents=F,
		           risk.table.height=.25)

#????ͼ??
pdf(file="survival.pdf", width=7, height=5.5, onefile=FALSE)
print(surPlot)
dev.off()

#??ȡ????ϸ???????ļ??????????ݽ???????
immune=read.table(immFile, header=T, sep="\t", check.names=F, row.names=1)
immune=immune[immune[,"P-value"]<0.05,]
data=as.matrix(immune[,1:(ncol(immune)-3)])

#??ȡ?????ļ?
risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)

#?ߵͷ???????????ϸ??????
lowSample=rownames(risk)[risk[,"risk"]=="Low"]
highSample=rownames(risk)[risk[,"risk"]=="High"]
lowSameSample=intersect(row.names(data),lowSample)
highSameSample=intersect(row.names(data),highSample)
dataLow=data[lowSameSample,]
dataHigh=data[highSameSample,]
data=rbind(dataLow, dataHigh)
conNum=length(lowSameSample)
treatNum=length(highSameSample)

#??????ϸ??????ѭ??, ????????ͼ
outTab=data.frame()
data=as.data.frame(data)
data=cbind(data,risk=c(rep("Low",conNum),rep("High",treatNum)))
for(i in colnames(data)[1:(ncol(data)-1)]){
	rt=data[,c(i,"risk")]
	colnames(rt)=c("Immune","Risk")
	if(sd(rt[,"Immune"])==0){rt[1,"Immune"]=0.00001}
	#???ñȽ???
	group=levels(factor(rt$Risk))
	rt$Type=factor(rt$Risk, levels=group)
	comp=combn(group,2)
	my_comparisons=list()
	for(j in 1:ncol(comp)){my_comparisons[[j]]<-comp[,j]}

	#?????ߵͷ?????֮????????pvalue
	wilcoxTest=wilcox.test(Immune ~ Risk, data=rt)
	pvalue=wilcoxTest$p.value
	sig=ifelse(pvalue<0.001,"***",ifelse(pvalue<0.01,"**",ifelse(pvalue<0.05,"*"," ")))
	outTab=rbind(outTab, cbind(cell=i, pvalue, sig))

	if(pvalue<0.05){
		#????????ͼ
		boxplot=ggboxplot(rt, x="Risk", y="Immune", fill="Risk",
				          xlab="Risk score",
				          ylab=i,
				          legend.title="Risk",
				          palette = c("blue","red") )+
			stat_compare_means(comparisons=my_comparisons)
		#????ͼ??
		pdf(file=paste0("immuneCell.",i,".pdf"), width=5, height=4.5)
		print(boxplot)
		dev.off()
	}
}
#?????????????Ľ???
write.table(outTab, file="diff.txt", sep="\t", row.names=F, quote=F)

#?????״?ͼ???????ļ?
radar=rbind(colMeans(dataLow), colMeans(dataHigh))
row.names(radar)=c("Low", "High")
radarOut=cbind(id=rownames(radar), radar)
write.table(radarOut, file="radarInput.txt", sep="\t", quote=F, row.names=F)

library("limma")            #???ð?
inputFile="ssgseaOut.txt"      #?????????ļ?
setwd("D:\\BaiduNetdiskDownload\\BaiduSyncdisk\\生信文章\\微生物组\\30.1 glycosisdiff")        #???ù???Ŀ¼

#??ȡ?????ļ????????????ļ?????
rt=read.table(inputFile, header=T, sep="\t", check.names=F)        #??ȡ?????ļ?
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=data[rowMeans(data)>0,]

#????ת??
#v=voom(data, plot=F, save.plot=F)
#out=v$E
out=rbind(ID=colnames(data),data)
write.table(out,file="uniq.symbol.txt",sep="\t",quote=F,col.names=F)        #?????ļ?

#????CIBERSORT???õ?????ϸ????  ????
source("ssGSEA18.CIBERSORT.R")
results=CIBERSORT("ref.txt", "uniq.symbol.txt", perm=1000, QN=TRUE)

library(reshape2)
library(ggpubr)
cluFile="Cluster.txt"               #分型结果文件
pFilter=0.05            #免疫细胞浸润结果的过滤条件
immFile="ssgseaOut.txt"     #免疫细胞浸润结果文件
#读取分型结果文件
Type=read.table(cluFile, header=T, sep="\t", check.names=F, row.names=1)
colnames(Type)=c("Cluster")
Type=Type[order(Type[,"Cluster"],decreasing=F),,drop=F]
Type$Cluster=factor(Type$Cluster, levels=unique(Type$Cluster))

#读取免疫细胞结果文件，并对数据进行整理
immune=read.table(immFile, header=T, sep="\t", check.names=F, row.names=1)
#immune=immune[immune[,"P-value"]<pFilter,]
immune=as.matrix(immune[,1:(ncol(immune))])
immune=t(immune)
#数据合并
sameSample=intersect(row.names(immune), row.names(Type))
rt=cbind(immune[sameSample,,drop=F], Type[sameSample,,drop=F])

#把数据转换成ggplot2输入文件
data=melt(rt, id.vars=c("Cluster"))
colnames(data)=c("Cluster", "Immune", "Expression")

#绘制箱线图
boxplot=ggboxplot(data, x="Immune", y="Expression", fill="Cluster",
                  xlab="",
                  ylab="Fraction",
                  legend.title="Cluster",
                  width=0.8,
                  palette=c("#525288","#fed71a","#e16723","#11AA4D"))+theme_grey()+
  rotate_x_text(50)+
  stat_compare_means(aes(group=Cluster),symnum.args=list(cutpoints=c(0, 0.001, 0.01, 0.05, 1), symbols=c("***", "**", "*", "")), label="p.signif")

#输出图片
pdf(file="immune.diff.pdf", width=15, height=12)
print(boxplot)


dev.off()

clusterFile="cluster.txt"      #???ͽ????ļ?
cliFile="time.txt"             #?????????ļ?
setwd("G:\\BaiduNetdiskDownload\\BaiduNetdiskWorkspace\\生信文章\\微生物组\\30.glycosisclustersurv")      #???ù???Ŀ¼

#??ȡ?????ļ?
cluster=read.table(clusterFile, header=T, sep="\t", check.names=F, row.names=1)
cli=read.table(cliFile, header=T, sep="\t", check.names=F, row.names=1)
colnames(cli)=c("futime", "fustat")
cli$futime=cli$futime/365

#???ݺϲ?
sameSample=intersect(row.names(cluster), row.names(cli))
rt=cbind(cli[sameSample,,drop=F], cluster[sameSample,,drop=F])

#????????ͳ??
length=length(levels(factor(rt$Cluster)))
diff=survdiff(Surv(futime, fustat) ~ Cluster, data = rt)
pValue=1-pchisq(diff$chisq, df=length-1)
if(pValue<0.001){
	pValue="p<0.001"
}else{
	pValue=paste0("p=",sprintf("%.03f",pValue))
}
fit <- survfit(Surv(futime, fustat) ~ Cluster, data = rt)
#print(surv_median(fit))

#????????????
#绘制生存曲线
bioCol=c("#525288","#fed71a","#e16723","#FFD121","#088247","#11AA4D")
bioCol=bioCol[1:length]
surPlot=ggsurvplot(fit, 
                   data=rt,
                   conf.int=F,
                   size=0.5,
                   pval=pValue,
                   pval.size=6,
                   legend.title="Cluster",
                   legend.labs=levels(factor(rt[,"Cluster"])),
                   legend = c(0.8, 0.8),
                   font.legend=10,
                   xlab="Time(years)",
                   ylab="Overall survival",
                   ggtheme=theme_light(),
                   break.time.by = 5,
                   palette = bioCol,
                   surv.median.line = "hv",
                   risk.table=T,
                   cumevents=F,
                   risk.table.height=.3,
                   font.title    = c(16, "bold", "darkblue"),#用长度为3的向量分别指定大小、类型、颜色
                   font.subtitle = c(15, "bold.italic", "purple"),
                   font.caption  = c(14, "plain", "orange"),
                   font.x        = c(14, "bold.italic", "red"),
                   font.y        = c(14, "bold.italic", "darkred"),
                   font.xtickslab = c(12, "plain", "darkgreen"))
pdf(file="survival.pdf",onefile = FALSE,width=7,height=6)
print(surPlot)
dev.off()

clusterFile="cluster.txt"          #分型结果文件
estimateFile="Stemnessscore.txt"       #肿瘤微环境打分文件

Type=read.table(clusterFile, header=T, sep="\t", check.names=F, row.names=1)
score=read.table(estimateFile, header=F, sep="\t", check.names=F, row.names=1)

colnames(Type)=c("Cluster")
Type=Type[order(Type[,"Cluster"],decreasing=F),,drop=F]
Type$Cluster=factor(Type$Cluster, levels=unique(Type$Cluster))

score=score[row.names(Type),,drop=F]

#数据合并
rt=cbind(Type, score)

library(reshape2)
library(ggpubr)
library(ggprism)
library(ggsci)
#将合并后的数据转换为ggplot2的输入文件
#data=melt(rt, id.vars=c("Cluster"))
colnames(rt)=c("Cluster", "Stemness")
#设置比较租
group=levels(factor(rt$Cluster))
rt$Cluster=factor(rt$Cluster, levels=group)
comp=combn(group,2)
my_comparisons=list()
for(i in 1:ncol(comp)){my_comparisons[[i]]<-comp[,i]}
#绘制小提琴图
p=ggboxplot(rt, x="Cluster", y="Stemness", 
           xlab="",
           ylab="Stemness",
           legend.title="Cluster",
           add = "jitter", color="Cluster",
           palette = c("#525288","#fed71a","#e16723","#11AA4D"), width=1)
p=p+rotate_x_text(45)
p1=p+
  stat_compare_means(comparisons = my_comparisons,symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", " ")),
                     label = "p.signif")+ theme_prism()+theme_grey()

#输出图形
pdf(file="vioplot.pdf", width=5, height=4)
print(p1)
dev.off()

#读取表达数据文件，并对数据进行处理
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp), colnames(exp))
data=matrix(as.numeric(as.matrix(exp)), nrow=nrow(exp), dimnames=dimnames)
data=t(data)
data=avereps(data)
data=data[rowMeans(data)>0,]

#读取基因列表文件, 提取LLPS基因的表达量
gene=read.table(geneFile, header=F, sep="\t", check.names=F)
sameGene=intersect(as.vector(gene[,1]), rownames(data))
geneExp=data[sameGene,]
geneExp=t(geneExp)
#输出LLPS基因的表达量
out=rbind(ID=colnames(geneExp), geneExp)
write.table(out, file="cluster1exp.txt", sep="\t", quote=F, col.names=F)

library(WGCNA)
expFile="merge.txt"      #表达数据文件
cliFile="clinical.txt"        #临床数据文件
#读取输入文件，并对输入文件进行整理
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)), nrow=nrow(exp), dimnames=dimnames)
data=avereps(data)
data=data[apply(data,1,sd)>0,]     #删除波动小的基因
data=t(data)
datExpr0=avereps(data)
###检查缺失值
gsg = goodSamplesGenes(datExpr0, verbose = 3)
if (!gsg$allOK){
  # Optionally, print the gene and sample names that were removed:
  if (sum(!gsg$goodGenes)>0)
    printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")))
  if (sum(!gsg$goodSamples)>0)
    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")))
  # Remove the offending genes and samples from the data:
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}

###样品聚类
sampleTree = hclust(dist(datExpr0), method = "average")
pdf(file = "1_sample_cluster.pdf", width = 12, height = 9)
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
###剪切线
abline(h = 150, col = "red")
dev.off()

###删除剪切线以下的样品
clust = cutreeStatic(sampleTree, cutHeight = 150, minSize = 10)
table(clust)
keepSamples = (clust==1)
datExpr0 = datExpr0[keepSamples, ]
###power值散点图
enableWGCNAThreads()   #多线程工作
powers = c(1:20)       #幂指数范围1:20
sft = pickSoftThreshold(datExpr0, powerVector = powers, verbose = 5)
pdf(file="2_scale_independence.pdf",width=9,height=5)
par(mfrow = c(1,2))
cex1 = 0.9
###拟合指数与power值散点图
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red") #可以修改
###平均连通性与power值散点图
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
dev.off()

###邻接矩阵转换
sft #查看最佳power值
softPower =sft$powerEstimate   #最佳power值
adjacency = adjacency(datExpr0, power = softPower)
softPower

###TOM矩阵
TOM = TOMsimilarity(adjacency)
dissTOM = 1-TOM

###基因聚类
geneTree = hclust(as.dist(dissTOM), method = "average");
pdf(file="3_gene_clustering.pdf",width=12,height=9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
     labels = FALSE, hang = 0.04)
dev.off()


###动态剪切模块识别
minModuleSize=250      #模块基因数目,每个模块最少包含多少个基因
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
                            deepSplit = 2, pamRespectsDendro = FALSE,
                            minClusterSize = minModuleSize);
table(dynamicMods)
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
pdf(file="4_Dynamic_Tree.pdf",width=8,height=6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")
dev.off()

###查找相似模块聚类
MEList = moduleEigengenes(datExpr0, colors = dynamicColors)
MEs = MEList$eigengenes
MEDiss = 1-cor(MEs);
METree = hclust(as.dist(MEDiss), method = "average")
pdf(file="5_Clustering_module.pdf",width=7,height=7)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")
MEDissThres = 0.1  #剪切高度可修改
#abline(h=MEDissThres, col = "red")
dev.off()

###相似模块合并
merge = mergeCloseModules(datExpr0, dynamicColors, cutHeight = MEDissThres, verbose = 3)
mergedColors = merge$colors
mergedMEs = merge$newMEs
pdf(file="6_merged_dynamic.pdf", width = 9, height = 6)
plotDendroAndColors(geneTree, mergedColors,"Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")
dev.off()
moduleColors = mergedColors
table(moduleColors)
colorOrder = c("grey", standardColors(50))
moduleLabels = match(moduleColors, colorOrder)-1
MEs = mergedMEs


###模块与临床性状的相关型热图
cli=read.table(cliFile, header=T, sep="\t", check.names=F, row.names=1)
sameSample=intersect(row.names(cli), row.names(MEs))
MEs=MEs[sameSample,]
datTraits=cli[sameSample,]
nGenes = ncol(datExpr0)
nSamples = nrow(datExpr0)
moduleTraitCor = cor(MEs, datTraits, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
pdf(file="7_Module_trait.pdf", width=6.5, height=5.5)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
                   signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(10, 10, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))
dev.off()

###基因所在的模块
probes = colnames(datExpr0)
geneInfo0 = data.frame(probes= probes,
                       moduleColor = moduleColors)
geneOrder =order(geneInfo0$moduleColor)
geneInfo = geneInfo0[geneOrder, ]
write.table(geneInfo, file = "allModules.txt",sep="\t",row.names=F,quote=F)


###输出每个模块的基因
for (mod in 1:nrow(table(moduleColors))){  
  modules = names(table(moduleColors))[mod]
  probes = colnames(datExpr0)
  inModule = (moduleColors == modules)
  modGenes = probes[inModule]
  write.table(modGenes, file =paste0("module_",modules,".txt"),sep="\t",row.names=F,col.names=F,quote=F)
}

rm(list=ls())


lapply(c("dplyr","Seurat","HGNChelper"), library, character.only = T)
library(tidyverse)
library(Matrix)
counts <- readMM("D:\\BaiduNetdiskDownload\\BaiduSyncdisk\\生信文章\\微生物组\\56.singlecell\\matrix.mtx")
# Read in `genes.tsv`
genes <- read_tsv("D:\\BaiduNetdiskDownload\\BaiduSyncdisk\\生信文章\\微生物组\\56.singlecell\\features.tsv", col_names = FALSE)
gene_ids <- genes$X2
# Read in `barcodes.tsv`
cells <- read_tsv("D:\\BaiduNetdiskDownload\\BaiduSyncdisk\\生信文章\\微生物组\\56.singlecell\\barcodes.tsv", col_names = FALSE)
cell_ids <- cells$X1
# Create a sparse matrix for more efficient computation
counts <- as(counts, "dgCMatrix")

# Make the column names as the cell IDs and the row names as the gene IDs
rownames(counts) <- gene_ids
colnames(counts) <- cell_ids
counts <-as.data.frame(counts)
####################################################################################
scRNA <- CreateSeuratObject(counts)

# normalize data
scRNA[["percent.mt"]] <- PercentageFeatureSet(scRNA, pattern = "^MT-")
scRNA <- NormalizeData(scRNA, normalization.method = "LogNormalize", scale.factor = 10000)
scRNA <- FindVariableFeatures(scRNA, selection.method = "vst", nfeatures = 2000)

# scale and run PCA
scRNA <- ScaleData(scRNA, features = rownames(scRNA))
scRNA <- RunPCA(scRNA, features = VariableFeatures(object = scRNA))

# Check number of PC components (we selected 10 PCs for downstream analysis, based on Elbow plot)
ElbowPlot(scRNA)

# cluster and visualize
scRNA <- FindNeighbors(scRNA, dims = 1:15)
scRNA <- FindClusters(scRNA, resolution = 0.8)
scRNA <- RunUMAP(scRNA, dims = 1:15)
DimPlot(scRNA, reduction = "umap")

# load gene set preparation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R")
# load cell type annotation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R")


# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Immune system" # e.g. Immune system,Pancreas,Liver,Eye,Kidney,Brain,Lung,Adrenal,Heart,Intestine,Muscle,Placenta,Spleen,Stomach,Thymus 

# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)

# get cell-type by cell matrix
es.max = sctype_score(scRNAseqData = scRNA[["RNA"]]@scale.data, scaled = TRUE, 
                      gs = gs_list$gs_positive, gs2 = gs_list$gs_negative) 

# NOTE: scRNAseqData parameter should correspond to your input scRNA-seq matrix. 
# In case Seurat is used, it is either scRNA[["RNA"]]@scale.data (default), scRNA[["SCT"]]@scale.data, in case sctransform is used for normalization,
# or scRNA[["integrated"]]@scale.data, in case a joint analysis of multiple single-cell datasets is performed.

# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(scRNA@meta.data$seurat_clusters), function(cl){
  es.max.cl = sort(rowSums(es.max[ ,rownames(scRNA@meta.data[scRNA@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
  head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(scRNA@meta.data$seurat_clusters==cl)), 10)
}))
sctype_scores = cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)  

# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] = "Unknown"
print(sctype_scores[,1:3])

scRNA@meta.data$customclassif = ""
for(j in unique(sctype_scores$cluster)){
  cl_type = sctype_scores[sctype_scores$cluster==j,]; 
  scRNA@meta.data$customclassif[scRNA@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
pdf(file="plot.pdf", width=8, height=6.5) 
DimPlot(scRNA, reduction = "umap", label = TRUE, repel = TRUE, group.by = 'customclassif') 
dev.off()

###提取细胞典型基因
diff.wilcox = FindAllMarkers(scRNA)
all.markers = diff.wilcox %>% select(gene, everything()) %>% subset(p_val<0.05)
top10 = all.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
write.csv(all.markers, "subcluster_diff_genes_wilcox.csv", row.names = F)
write.csv(top10, "subcluster_top10_diff_genes_wilcox.csv", row.names = F)

###Gly-lactate signature
GL.genes <- c("ISCU","IRX2","SLCO4C1","CCDC28A","RAPGEF6","RPS6KA3","SLC2A13","EIF4E3","BBS5","ZNF319","LIPT1","SLC26A11","ASTE1","MLLT1","ASCC1","EHBP1","GJB3","RHOV","SLC2A1")
sce <- PercentageFeatureSet(scRNA,features = GL.genes,col.name = 'Glycosis_lactate_score')
pdf(file="plot2.pdf", width=8, height=6.5)
FeaturePlot(sce,'Glycosis_lactate_score')
dev.off()


###小提琴图
#my_comparisons <- list(c('Naive CD4 T','B'),c('Memory CD4 T','B'))
library(ggpubr)
pdf(file="plot3.pdf", width=8, height=6.5)
ggviolin(scRNA@meta.data, x = "customclassif", y = "Glycosis_lactate_score",
                         color = "customclassif",add = 'mean_sd',fill = 'customclassif',
                         add.params = list(color = "black")) + 
  scale_color_manual() + 
  scale_fill_manual() +
  theme(axis.text.x.bottom = element_text(angle = 90,vjust = 0.5,hjust = 1)) + 
  NoLegend() + labs(x = '')
dev.off()
write.table(sce@meta.data, file="outTab.txt", sep="\t", quote=F, col.names=T)


